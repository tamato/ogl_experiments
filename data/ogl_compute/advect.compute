#version 430
precision highp float;

layout(local_size_x=32,local_size_y=32) in;
coherent layout(binding=0, rgba16f) uniform image2D Quantity;
coherent layout(binding=1, rgba16f) uniform image2D VelocityField;

uniform float DeltaTime = 1.;
uniform float Dissipation = 0.9;

vec4 bilinearInterp( ivec2 pos )
{
    vec4 tl = imageLoad(Quantity, pos + ivec2( 0, 0 ));
    vec4 tr = imageLoad(Quantity, pos + ivec2( 1, 0 ));
    vec4 bl = imageLoad(Quantity, pos + ivec2( 0, 1 ));
    vec4 br = imageLoad(Quantity, pos + ivec2( 1, 1 ));

    vec4 tmp1 = mix( tl, tr, .5 );
    vec4 tmp2 = mix( bl, br, .5 );
    return mix(tmp1, tmp2, .5);
}

void main(void) {
    ivec2 location = ivec2(gl_GlobalInvocationID);
    vec2 pos = vec2(location) - imageLoad(VelocityField, location).xy;
    vec2 dir = imageLoad(VelocityField, location).xy;
    if (dot( normalize(dir), vec2(-1,0) ) < .8)
        pos = vec2(location) - vec2(10,1);
    // vec4 result = Dissipation * bilinearInterp(ivec2(pos)); // when done origianlly, window size == texture size. this is only needed if they are not 1:1
    vec4 result = Dissipation * imageLoad(Quantity, ivec2(pos));
    imageStore(Quantity, location, result);
}