#version 430
precision highp float;

layout(local_size_x=32,local_size_y=32) in;
layout(binding=0, rgba16f) uniform image2D InInk;
layout(binding=1, rgba16f) uniform image2D OutInk;

uniform ivec2 InkSpot[2];
uniform float Radius = 15;

float distToLine(in vec2 test_pt, in vec2 start_pt, in vec2 end_pt){
    vec2 line = end_pt - start_pt;
    vec2 diff = test_pt - start_pt;
    float line_length = length(line);
    vec2 norm = line / line_length;
    float d = dot(norm, diff);
    vec2 pt_on_line = start_pt + norm * d;
    float dist = length(test_pt - pt_on_line);
    return dist;
}

bool ptBetweenPts(in vec2 test_pt, in vec2 start_pt, in vec2 end_pt){
    vec2 line = end_pt - start_pt;
    vec2 to_start = test_pt - start_pt;
    vec2 to_end = test_pt - end_pt;
    float a = dot(line, to_start);
    float c = dot(line, to_end);
    return (c < 0 && a > 0);
}

void main(void) {
    //vec4 data = vec4(gl_WorkGroupID / vec3(gl_NumWorkGroups),1);
    ivec2 location = ivec2(gl_GlobalInvocationID);
    float dist = distToLine(location, InkSpot[0], InkSpot[1]);
    
    vec4 data = imageLoad(InInk, location);
    
    float percent = (length(dist) / Radius);
    percent = 1. - min(percent, 1);
    
    if (ptBetweenPts(location, InkSpot[0], InkSpot[1] ) == false){
        float dist_to_start = length(InkSpot[0] - location);
        float dist_to_end   = length(InkSpot[1] - location);
        if (dist_to_start > Radius && dist_to_end > Radius){
            percent = 0.;
        }
    }

    data += smoothstep(0.1, 1.0, percent);
    data -= vec4(0.01);
    data = max(data, 0.);
    imageStore(InInk, location, data);
}
